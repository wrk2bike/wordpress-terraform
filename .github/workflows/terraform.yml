name: "Terraform"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.gitignore'

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ secrets.AWS_REGION }}"
          vpc_cidr = "${{ secrets.VPC_CIDR }}"
          db_name = "${{ secrets.DB_NAME }}"
          db_username = "${{ secrets.DB_USERNAME }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          instance_type = "${{ secrets.INSTANCE_TYPE }}"
          db_instance_class = "${{ secrets.DB_INSTANCE_CLASS }}"
          min_size = ${{ secrets.MIN_SIZE }}
          max_size = ${{ secrets.MAX_SIZE }}
          EOF
        
      - name: Configure Terraform Backend
        run: |
          cat > backend_config.tfvars << EOF
          bucket = "${{ secrets.TF_STATE_BUCKET }}"
          key = "${{ secrets.TF_STATE_KEY }}"
          region = "${{ secrets.AWS_REGION }}"
          dynamodb_table = "${{ secrets.TF_LOCK_TABLE }}"
          encrypt = true
          EOF

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend_config.tfvars

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve